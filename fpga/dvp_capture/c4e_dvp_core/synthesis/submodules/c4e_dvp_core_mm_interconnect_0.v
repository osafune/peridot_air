// c4e_dvp_core_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module c4e_dvp_core_mm_interconnect_0 (
		input  wire        core_clk_clk_clk,                                      //                                    core_clk_clk.clk
		input  wire        peri_clk_clk_clk,                                      //                                    peri_clk_clk.clk
		input  wire        peripheral_bridge_reset_reset_bridge_in_reset_reset,   //   peripheral_bridge_reset_reset_bridge_in_reset.reset
		input  wire        uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset, // uart_to_avmm_bridge_reset_reset_bridge_in_reset.reset
		input  wire        vga_reset_reset_bridge_in_reset_reset,                 //                 vga_reset_reset_bridge_in_reset.reset
		input  wire [31:0] cam_m1_address,                                        //                                          cam_m1.address
		output wire        cam_m1_waitrequest,                                    //                                                .waitrequest
		input  wire [8:0]  cam_m1_burstcount,                                     //                                                .burstcount
		input  wire [3:0]  cam_m1_byteenable,                                     //                                                .byteenable
		input  wire        cam_m1_write,                                          //                                                .write
		input  wire [31:0] cam_m1_writedata,                                      //                                                .writedata
		input  wire [31:0] uart_to_avmm_bridge_avm_address,                       //                         uart_to_avmm_bridge_avm.address
		output wire        uart_to_avmm_bridge_avm_waitrequest,                   //                                                .waitrequest
		input  wire [3:0]  uart_to_avmm_bridge_avm_byteenable,                    //                                                .byteenable
		input  wire        uart_to_avmm_bridge_avm_read,                          //                                                .read
		output wire [31:0] uart_to_avmm_bridge_avm_readdata,                      //                                                .readdata
		output wire        uart_to_avmm_bridge_avm_readdatavalid,                 //                                                .readdatavalid
		input  wire        uart_to_avmm_bridge_avm_write,                         //                                                .write
		input  wire [31:0] uart_to_avmm_bridge_avm_writedata,                     //                                                .writedata
		input  wire [31:0] vga_m1_address,                                        //                                          vga_m1.address
		output wire        vga_m1_waitrequest,                                    //                                                .waitrequest
		input  wire [8:0]  vga_m1_burstcount,                                     //                                                .burstcount
		input  wire        vga_m1_read,                                           //                                                .read
		output wire [31:0] vga_m1_readdata,                                       //                                                .readdata
		output wire        vga_m1_readdatavalid,                                  //                                                .readdatavalid
		output wire [9:0]  peripheral_bridge_s0_address,                          //                            peripheral_bridge_s0.address
		output wire        peripheral_bridge_s0_write,                            //                                                .write
		output wire        peripheral_bridge_s0_read,                             //                                                .read
		input  wire [31:0] peripheral_bridge_s0_readdata,                         //                                                .readdata
		output wire [31:0] peripheral_bridge_s0_writedata,                        //                                                .writedata
		output wire [0:0]  peripheral_bridge_s0_burstcount,                       //                                                .burstcount
		output wire [3:0]  peripheral_bridge_s0_byteenable,                       //                                                .byteenable
		input  wire        peripheral_bridge_s0_readdatavalid,                    //                                                .readdatavalid
		input  wire        peripheral_bridge_s0_waitrequest,                      //                                                .waitrequest
		output wire        peripheral_bridge_s0_debugaccess,                      //                                                .debugaccess
		output wire [23:0] sdram_s1_address,                                      //                                        sdram_s1.address
		output wire        sdram_s1_write,                                        //                                                .write
		output wire        sdram_s1_read,                                         //                                                .read
		input  wire [15:0] sdram_s1_readdata,                                     //                                                .readdata
		output wire [15:0] sdram_s1_writedata,                                    //                                                .writedata
		output wire [1:0]  sdram_s1_byteenable,                                   //                                                .byteenable
		input  wire        sdram_s1_readdatavalid,                                //                                                .readdatavalid
		input  wire        sdram_s1_waitrequest,                                  //                                                .waitrequest
		output wire        sdram_s1_chipselect                                    //                                                .chipselect
	);

	wire          uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_waitrequest;   // uart_to_avmm_bridge_avm_agent:av_waitrequest -> uart_to_avmm_bridge_avm_translator:uav_waitrequest
	wire   [31:0] uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_readdata;      // uart_to_avmm_bridge_avm_agent:av_readdata -> uart_to_avmm_bridge_avm_translator:uav_readdata
	wire          uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_debugaccess;   // uart_to_avmm_bridge_avm_translator:uav_debugaccess -> uart_to_avmm_bridge_avm_agent:av_debugaccess
	wire   [31:0] uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_address;       // uart_to_avmm_bridge_avm_translator:uav_address -> uart_to_avmm_bridge_avm_agent:av_address
	wire          uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_read;          // uart_to_avmm_bridge_avm_translator:uav_read -> uart_to_avmm_bridge_avm_agent:av_read
	wire    [3:0] uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_byteenable;    // uart_to_avmm_bridge_avm_translator:uav_byteenable -> uart_to_avmm_bridge_avm_agent:av_byteenable
	wire          uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_readdatavalid; // uart_to_avmm_bridge_avm_agent:av_readdatavalid -> uart_to_avmm_bridge_avm_translator:uav_readdatavalid
	wire          uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_lock;          // uart_to_avmm_bridge_avm_translator:uav_lock -> uart_to_avmm_bridge_avm_agent:av_lock
	wire          uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_write;         // uart_to_avmm_bridge_avm_translator:uav_write -> uart_to_avmm_bridge_avm_agent:av_write
	wire   [31:0] uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_writedata;     // uart_to_avmm_bridge_avm_translator:uav_writedata -> uart_to_avmm_bridge_avm_agent:av_writedata
	wire    [2:0] uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_burstcount;    // uart_to_avmm_bridge_avm_translator:uav_burstcount -> uart_to_avmm_bridge_avm_agent:av_burstcount
	wire          vga_m1_translator_avalon_universal_master_0_waitrequest;                    // vga_m1_agent:av_waitrequest -> vga_m1_translator:uav_waitrequest
	wire   [31:0] vga_m1_translator_avalon_universal_master_0_readdata;                       // vga_m1_agent:av_readdata -> vga_m1_translator:uav_readdata
	wire          vga_m1_translator_avalon_universal_master_0_debugaccess;                    // vga_m1_translator:uav_debugaccess -> vga_m1_agent:av_debugaccess
	wire   [31:0] vga_m1_translator_avalon_universal_master_0_address;                        // vga_m1_translator:uav_address -> vga_m1_agent:av_address
	wire          vga_m1_translator_avalon_universal_master_0_read;                           // vga_m1_translator:uav_read -> vga_m1_agent:av_read
	wire    [3:0] vga_m1_translator_avalon_universal_master_0_byteenable;                     // vga_m1_translator:uav_byteenable -> vga_m1_agent:av_byteenable
	wire          vga_m1_translator_avalon_universal_master_0_readdatavalid;                  // vga_m1_agent:av_readdatavalid -> vga_m1_translator:uav_readdatavalid
	wire          vga_m1_translator_avalon_universal_master_0_lock;                           // vga_m1_translator:uav_lock -> vga_m1_agent:av_lock
	wire          vga_m1_translator_avalon_universal_master_0_write;                          // vga_m1_translator:uav_write -> vga_m1_agent:av_write
	wire   [31:0] vga_m1_translator_avalon_universal_master_0_writedata;                      // vga_m1_translator:uav_writedata -> vga_m1_agent:av_writedata
	wire   [10:0] vga_m1_translator_avalon_universal_master_0_burstcount;                     // vga_m1_translator:uav_burstcount -> vga_m1_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                      // rsp_mux_001:src_valid -> vga_m1_agent:rp_valid
	wire  [111:0] rsp_mux_001_src_data;                                                       // rsp_mux_001:src_data -> vga_m1_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                      // vga_m1_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                    // rsp_mux_001:src_channel -> vga_m1_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                              // rsp_mux_001:src_startofpacket -> vga_m1_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                // rsp_mux_001:src_endofpacket -> vga_m1_agent:rp_endofpacket
	wire          cam_m1_translator_avalon_universal_master_0_waitrequest;                    // cam_m1_agent:av_waitrequest -> cam_m1_translator:uav_waitrequest
	wire   [31:0] cam_m1_translator_avalon_universal_master_0_readdata;                       // cam_m1_agent:av_readdata -> cam_m1_translator:uav_readdata
	wire          cam_m1_translator_avalon_universal_master_0_debugaccess;                    // cam_m1_translator:uav_debugaccess -> cam_m1_agent:av_debugaccess
	wire   [31:0] cam_m1_translator_avalon_universal_master_0_address;                        // cam_m1_translator:uav_address -> cam_m1_agent:av_address
	wire          cam_m1_translator_avalon_universal_master_0_read;                           // cam_m1_translator:uav_read -> cam_m1_agent:av_read
	wire    [3:0] cam_m1_translator_avalon_universal_master_0_byteenable;                     // cam_m1_translator:uav_byteenable -> cam_m1_agent:av_byteenable
	wire          cam_m1_translator_avalon_universal_master_0_readdatavalid;                  // cam_m1_agent:av_readdatavalid -> cam_m1_translator:uav_readdatavalid
	wire          cam_m1_translator_avalon_universal_master_0_lock;                           // cam_m1_translator:uav_lock -> cam_m1_agent:av_lock
	wire          cam_m1_translator_avalon_universal_master_0_write;                          // cam_m1_translator:uav_write -> cam_m1_agent:av_write
	wire   [31:0] cam_m1_translator_avalon_universal_master_0_writedata;                      // cam_m1_translator:uav_writedata -> cam_m1_agent:av_writedata
	wire   [10:0] cam_m1_translator_avalon_universal_master_0_burstcount;                     // cam_m1_translator:uav_burstcount -> cam_m1_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                      // rsp_mux_002:src_valid -> cam_m1_agent:rp_valid
	wire  [111:0] rsp_mux_002_src_data;                                                       // rsp_mux_002:src_data -> cam_m1_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                      // cam_m1_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                                    // rsp_mux_002:src_channel -> cam_m1_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                              // rsp_mux_002:src_startofpacket -> cam_m1_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                // rsp_mux_002:src_endofpacket -> cam_m1_agent:rp_endofpacket
	wire   [31:0] peripheral_bridge_s0_agent_m0_readdata;                                     // peripheral_bridge_s0_translator:uav_readdata -> peripheral_bridge_s0_agent:m0_readdata
	wire          peripheral_bridge_s0_agent_m0_waitrequest;                                  // peripheral_bridge_s0_translator:uav_waitrequest -> peripheral_bridge_s0_agent:m0_waitrequest
	wire          peripheral_bridge_s0_agent_m0_debugaccess;                                  // peripheral_bridge_s0_agent:m0_debugaccess -> peripheral_bridge_s0_translator:uav_debugaccess
	wire   [31:0] peripheral_bridge_s0_agent_m0_address;                                      // peripheral_bridge_s0_agent:m0_address -> peripheral_bridge_s0_translator:uav_address
	wire    [3:0] peripheral_bridge_s0_agent_m0_byteenable;                                   // peripheral_bridge_s0_agent:m0_byteenable -> peripheral_bridge_s0_translator:uav_byteenable
	wire          peripheral_bridge_s0_agent_m0_read;                                         // peripheral_bridge_s0_agent:m0_read -> peripheral_bridge_s0_translator:uav_read
	wire          peripheral_bridge_s0_agent_m0_readdatavalid;                                // peripheral_bridge_s0_translator:uav_readdatavalid -> peripheral_bridge_s0_agent:m0_readdatavalid
	wire          peripheral_bridge_s0_agent_m0_lock;                                         // peripheral_bridge_s0_agent:m0_lock -> peripheral_bridge_s0_translator:uav_lock
	wire   [31:0] peripheral_bridge_s0_agent_m0_writedata;                                    // peripheral_bridge_s0_agent:m0_writedata -> peripheral_bridge_s0_translator:uav_writedata
	wire          peripheral_bridge_s0_agent_m0_write;                                        // peripheral_bridge_s0_agent:m0_write -> peripheral_bridge_s0_translator:uav_write
	wire    [2:0] peripheral_bridge_s0_agent_m0_burstcount;                                   // peripheral_bridge_s0_agent:m0_burstcount -> peripheral_bridge_s0_translator:uav_burstcount
	wire          peripheral_bridge_s0_agent_rf_source_valid;                                 // peripheral_bridge_s0_agent:rf_source_valid -> peripheral_bridge_s0_agent_rsp_fifo:in_valid
	wire  [112:0] peripheral_bridge_s0_agent_rf_source_data;                                  // peripheral_bridge_s0_agent:rf_source_data -> peripheral_bridge_s0_agent_rsp_fifo:in_data
	wire          peripheral_bridge_s0_agent_rf_source_ready;                                 // peripheral_bridge_s0_agent_rsp_fifo:in_ready -> peripheral_bridge_s0_agent:rf_source_ready
	wire          peripheral_bridge_s0_agent_rf_source_startofpacket;                         // peripheral_bridge_s0_agent:rf_source_startofpacket -> peripheral_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          peripheral_bridge_s0_agent_rf_source_endofpacket;                           // peripheral_bridge_s0_agent:rf_source_endofpacket -> peripheral_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          peripheral_bridge_s0_agent_rsp_fifo_out_valid;                              // peripheral_bridge_s0_agent_rsp_fifo:out_valid -> peripheral_bridge_s0_agent:rf_sink_valid
	wire  [112:0] peripheral_bridge_s0_agent_rsp_fifo_out_data;                               // peripheral_bridge_s0_agent_rsp_fifo:out_data -> peripheral_bridge_s0_agent:rf_sink_data
	wire          peripheral_bridge_s0_agent_rsp_fifo_out_ready;                              // peripheral_bridge_s0_agent:rf_sink_ready -> peripheral_bridge_s0_agent_rsp_fifo:out_ready
	wire          peripheral_bridge_s0_agent_rsp_fifo_out_startofpacket;                      // peripheral_bridge_s0_agent_rsp_fifo:out_startofpacket -> peripheral_bridge_s0_agent:rf_sink_startofpacket
	wire          peripheral_bridge_s0_agent_rsp_fifo_out_endofpacket;                        // peripheral_bridge_s0_agent_rsp_fifo:out_endofpacket -> peripheral_bridge_s0_agent:rf_sink_endofpacket
	wire          peripheral_bridge_s0_agent_rdata_fifo_src_valid;                            // peripheral_bridge_s0_agent:rdata_fifo_src_valid -> peripheral_bridge_s0_agent_rdata_fifo:in_valid
	wire   [33:0] peripheral_bridge_s0_agent_rdata_fifo_src_data;                             // peripheral_bridge_s0_agent:rdata_fifo_src_data -> peripheral_bridge_s0_agent_rdata_fifo:in_data
	wire          peripheral_bridge_s0_agent_rdata_fifo_src_ready;                            // peripheral_bridge_s0_agent_rdata_fifo:in_ready -> peripheral_bridge_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> peripheral_bridge_s0_agent:cp_valid
	wire  [111:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> peripheral_bridge_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                          // peripheral_bridge_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> peripheral_bridge_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> peripheral_bridge_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> peripheral_bridge_s0_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                 // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                              // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                              // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                  // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                               // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                     // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                            // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                     // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                    // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                               // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                             // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire   [94:0] sdram_s1_agent_rf_source_data;                                              // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                             // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                     // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                       // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                          // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire   [94:0] sdram_s1_agent_rsp_fifo_out_data;                                           // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                          // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                  // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                    // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                        // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                         // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                        // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          uart_to_avmm_bridge_avm_agent_cp_valid;                                     // uart_to_avmm_bridge_avm_agent:cp_valid -> router:sink_valid
	wire  [111:0] uart_to_avmm_bridge_avm_agent_cp_data;                                      // uart_to_avmm_bridge_avm_agent:cp_data -> router:sink_data
	wire          uart_to_avmm_bridge_avm_agent_cp_ready;                                     // router:sink_ready -> uart_to_avmm_bridge_avm_agent:cp_ready
	wire          uart_to_avmm_bridge_avm_agent_cp_startofpacket;                             // uart_to_avmm_bridge_avm_agent:cp_startofpacket -> router:sink_startofpacket
	wire          uart_to_avmm_bridge_avm_agent_cp_endofpacket;                               // uart_to_avmm_bridge_avm_agent:cp_endofpacket -> router:sink_endofpacket
	wire          vga_m1_agent_cp_valid;                                                      // vga_m1_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] vga_m1_agent_cp_data;                                                       // vga_m1_agent:cp_data -> router_001:sink_data
	wire          vga_m1_agent_cp_ready;                                                      // router_001:sink_ready -> vga_m1_agent:cp_ready
	wire          vga_m1_agent_cp_startofpacket;                                              // vga_m1_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          vga_m1_agent_cp_endofpacket;                                                // vga_m1_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [111:0] router_001_src_data;                                                        // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                       // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                     // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cam_m1_agent_cp_valid;                                                      // cam_m1_agent:cp_valid -> router_002:sink_valid
	wire  [111:0] cam_m1_agent_cp_data;                                                       // cam_m1_agent:cp_data -> router_002:sink_data
	wire          cam_m1_agent_cp_ready;                                                      // router_002:sink_ready -> cam_m1_agent:cp_ready
	wire          cam_m1_agent_cp_startofpacket;                                              // cam_m1_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          cam_m1_agent_cp_endofpacket;                                                // cam_m1_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [111:0] router_002_src_data;                                                        // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                       // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                     // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          peripheral_bridge_s0_agent_rp_valid;                                        // peripheral_bridge_s0_agent:rp_valid -> router_003:sink_valid
	wire  [111:0] peripheral_bridge_s0_agent_rp_data;                                         // peripheral_bridge_s0_agent:rp_data -> router_003:sink_data
	wire          peripheral_bridge_s0_agent_rp_ready;                                        // router_003:sink_ready -> peripheral_bridge_s0_agent:rp_ready
	wire          peripheral_bridge_s0_agent_rp_startofpacket;                                // peripheral_bridge_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          peripheral_bridge_s0_agent_rp_endofpacket;                                  // peripheral_bridge_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux:sink_valid
	wire  [111:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                    // sdram_s1_agent:rp_valid -> router_004:sink_valid
	wire   [93:0] sdram_s1_agent_rp_data;                                                     // sdram_s1_agent:rp_data -> router_004:sink_data
	wire          sdram_s1_agent_rp_ready;                                                    // router_004:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                            // sdram_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                              // sdram_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> uart_to_avmm_bridge_avm_limiter:cmd_sink_valid
	wire  [111:0] router_src_data;                                                            // router:src_data -> uart_to_avmm_bridge_avm_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // uart_to_avmm_bridge_avm_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                         // router:src_channel -> uart_to_avmm_bridge_avm_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> uart_to_avmm_bridge_avm_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> uart_to_avmm_bridge_avm_limiter:cmd_sink_endofpacket
	wire  [111:0] uart_to_avmm_bridge_avm_limiter_cmd_src_data;                               // uart_to_avmm_bridge_avm_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          uart_to_avmm_bridge_avm_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> uart_to_avmm_bridge_avm_limiter:cmd_src_ready
	wire    [2:0] uart_to_avmm_bridge_avm_limiter_cmd_src_channel;                            // uart_to_avmm_bridge_avm_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          uart_to_avmm_bridge_avm_limiter_cmd_src_startofpacket;                      // uart_to_avmm_bridge_avm_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          uart_to_avmm_bridge_avm_limiter_cmd_src_endofpacket;                        // uart_to_avmm_bridge_avm_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> uart_to_avmm_bridge_avm_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> uart_to_avmm_bridge_avm_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                          // uart_to_avmm_bridge_avm_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> uart_to_avmm_bridge_avm_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> uart_to_avmm_bridge_avm_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> uart_to_avmm_bridge_avm_limiter:rsp_sink_endofpacket
	wire          uart_to_avmm_bridge_avm_limiter_rsp_src_valid;                              // uart_to_avmm_bridge_avm_limiter:rsp_src_valid -> uart_to_avmm_bridge_avm_agent:rp_valid
	wire  [111:0] uart_to_avmm_bridge_avm_limiter_rsp_src_data;                               // uart_to_avmm_bridge_avm_limiter:rsp_src_data -> uart_to_avmm_bridge_avm_agent:rp_data
	wire          uart_to_avmm_bridge_avm_limiter_rsp_src_ready;                              // uart_to_avmm_bridge_avm_agent:rp_ready -> uart_to_avmm_bridge_avm_limiter:rsp_src_ready
	wire    [2:0] uart_to_avmm_bridge_avm_limiter_rsp_src_channel;                            // uart_to_avmm_bridge_avm_limiter:rsp_src_channel -> uart_to_avmm_bridge_avm_agent:rp_channel
	wire          uart_to_avmm_bridge_avm_limiter_rsp_src_startofpacket;                      // uart_to_avmm_bridge_avm_limiter:rsp_src_startofpacket -> uart_to_avmm_bridge_avm_agent:rp_startofpacket
	wire          uart_to_avmm_bridge_avm_limiter_rsp_src_endofpacket;                        // uart_to_avmm_bridge_avm_limiter:rsp_src_endofpacket -> uart_to_avmm_bridge_avm_agent:rp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                       // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire   [93:0] sdram_s1_burst_adapter_source0_data;                                        // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                       // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire    [2:0] sdram_s1_burst_adapter_source0_channel;                                     // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                               // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                 // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                       // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                   // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                    // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src0_ready;                                                   // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                 // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                           // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                             // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                   // cmd_demux_002:src0_valid -> cmd_mux_001:sink2_valid
	wire  [111:0] cmd_demux_002_src0_data;                                                    // cmd_demux_002:src0_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src0_ready;                                                   // cmd_mux_001:sink2_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                                 // cmd_demux_002:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                           // cmd_demux_002:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                             // cmd_demux_002:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                   // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                   // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] rsp_demux_001_src1_data;                                                    // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src1_ready;                                                   // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire    [2:0] rsp_demux_001_src1_channel;                                                 // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                           // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                             // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                   // rsp_demux_001:src2_valid -> rsp_mux_002:sink0_valid
	wire  [111:0] rsp_demux_001_src2_data;                                                    // rsp_demux_001:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_001_src2_ready;                                                   // rsp_mux_002:sink0_ready -> rsp_demux_001:src2_ready
	wire    [2:0] rsp_demux_001_src2_channel;                                                 // rsp_demux_001:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_001_src2_startofpacket;                                           // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                             // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> sdram_s1_rsp_width_adapter:in_valid
	wire   [93:0] router_004_src_data;                                                        // router_004:src_data -> sdram_s1_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                       // sdram_s1_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                                     // router_004:src_channel -> sdram_s1_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> sdram_s1_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> sdram_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                       // sdram_s1_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [111:0] sdram_s1_rsp_width_adapter_src_data;                                        // sdram_s1_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                       // rsp_demux_001:sink_ready -> sdram_s1_rsp_width_adapter:out_ready
	wire    [2:0] sdram_s1_rsp_width_adapter_src_channel;                                     // sdram_s1_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                               // sdram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                 // sdram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> sdram_s1_cmd_width_adapter:in_valid
	wire  [111:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> sdram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                      // sdram_s1_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> sdram_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                       // sdram_s1_cmd_width_adapter:out_valid -> sdram_s1_burst_adapter:sink0_valid
	wire   [93:0] sdram_s1_cmd_width_adapter_src_data;                                        // sdram_s1_cmd_width_adapter:out_data -> sdram_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                       // sdram_s1_burst_adapter:sink0_ready -> sdram_s1_cmd_width_adapter:out_ready
	wire    [2:0] sdram_s1_cmd_width_adapter_src_channel;                                     // sdram_s1_cmd_width_adapter:out_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                               // sdram_s1_cmd_width_adapter:out_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                 // sdram_s1_cmd_width_adapter:out_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> crosser:in_valid
	wire  [111:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                       // crosser:in_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                          // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [111:0] crosser_out_data;                                                           // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                          // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [2:0] crosser_out_channel;                                                        // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                  // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                    // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [111:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                                       // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                      // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [111:0] crosser_001_out_data;                                                       // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                                      // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [2:0] crosser_001_out_channel;                                                    // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                              // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire    [2:0] uart_to_avmm_bridge_avm_limiter_cmd_valid_data;                             // uart_to_avmm_bridge_avm_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          peripheral_bridge_s0_agent_rdata_fifo_out_valid;                            // peripheral_bridge_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] peripheral_bridge_s0_agent_rdata_fifo_out_data;                             // peripheral_bridge_s0_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          peripheral_bridge_s0_agent_rdata_fifo_out_ready;                            // avalon_st_adapter:in_0_ready -> peripheral_bridge_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                              // avalon_st_adapter:out_0_valid -> peripheral_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                               // avalon_st_adapter:out_0_data -> peripheral_bridge_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                              // peripheral_bridge_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                              // avalon_st_adapter:out_0_error -> peripheral_bridge_s0_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                        // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                         // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_001:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                          // avalon_st_adapter_001:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_001_out_0_data;                                           // avalon_st_adapter_001:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                          // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                          // avalon_st_adapter_001:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) uart_to_avmm_bridge_avm_translator (
		.clk                    (core_clk_clk_clk),                                                           //                       clk.clk
		.reset                  (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset),                      //                     reset.reset
		.uav_address            (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (uart_to_avmm_bridge_avm_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (uart_to_avmm_bridge_avm_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (uart_to_avmm_bridge_avm_byteenable),                                         //                          .byteenable
		.av_read                (uart_to_avmm_bridge_avm_read),                                               //                          .read
		.av_readdata            (uart_to_avmm_bridge_avm_readdata),                                           //                          .readdata
		.av_readdatavalid       (uart_to_avmm_bridge_avm_readdatavalid),                                      //                          .readdatavalid
		.av_write               (uart_to_avmm_bridge_avm_write),                                              //                          .write
		.av_writedata           (uart_to_avmm_bridge_avm_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (9),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vga_m1_translator (
		.clk                    (core_clk_clk_clk),                                          //                       clk.clk
		.reset                  (vga_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (vga_m1_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (vga_m1_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (vga_m1_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (vga_m1_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (vga_m1_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (vga_m1_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (vga_m1_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (vga_m1_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (vga_m1_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (vga_m1_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (vga_m1_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (vga_m1_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (vga_m1_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (vga_m1_burstcount),                                         //                          .burstcount
		.av_read                (vga_m1_read),                                               //                          .read
		.av_readdata            (vga_m1_readdata),                                           //                          .readdata
		.av_readdatavalid       (vga_m1_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                      //               (terminated)
		.av_write               (1'b0),                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                      //               (terminated)
		.av_lock                (1'b0),                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                      //               (terminated)
		.uav_clken              (),                                                          //               (terminated)
		.av_clken               (1'b1),                                                      //               (terminated)
		.uav_response           (2'b00),                                                     //               (terminated)
		.av_response            (),                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (9),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cam_m1_translator (
		.clk                    (core_clk_clk_clk),                                          //                       clk.clk
		.reset                  (vga_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (cam_m1_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cam_m1_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cam_m1_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cam_m1_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cam_m1_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cam_m1_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cam_m1_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cam_m1_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cam_m1_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cam_m1_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cam_m1_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cam_m1_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cam_m1_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cam_m1_burstcount),                                         //                          .burstcount
		.av_byteenable          (cam_m1_byteenable),                                         //                          .byteenable
		.av_write               (cam_m1_write),                                              //                          .write
		.av_writedata           (cam_m1_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                      //               (terminated)
		.av_read                (1'b0),                                                      //               (terminated)
		.av_readdata            (),                                                          //               (terminated)
		.av_readdatavalid       (),                                                          //               (terminated)
		.av_lock                (1'b0),                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                      //               (terminated)
		.uav_clken              (),                                                          //               (terminated)
		.av_clken               (1'b1),                                                      //               (terminated)
		.uav_response           (2'b00),                                                     //               (terminated)
		.av_response            (),                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) peripheral_bridge_s0_translator (
		.clk                    (peri_clk_clk_clk),                                    //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (peripheral_bridge_s0_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (peripheral_bridge_s0_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (peripheral_bridge_s0_agent_m0_read),                  //                         .read
		.uav_write              (peripheral_bridge_s0_agent_m0_write),                 //                         .write
		.uav_waitrequest        (peripheral_bridge_s0_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (peripheral_bridge_s0_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (peripheral_bridge_s0_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (peripheral_bridge_s0_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (peripheral_bridge_s0_agent_m0_writedata),             //                         .writedata
		.uav_lock               (peripheral_bridge_s0_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (peripheral_bridge_s0_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (peripheral_bridge_s0_address),                        //      avalon_anti_slave_0.address
		.av_write               (peripheral_bridge_s0_write),                          //                         .write
		.av_read                (peripheral_bridge_s0_read),                           //                         .read
		.av_readdata            (peripheral_bridge_s0_readdata),                       //                         .readdata
		.av_writedata           (peripheral_bridge_s0_writedata),                      //                         .writedata
		.av_burstcount          (peripheral_bridge_s0_burstcount),                     //                         .burstcount
		.av_byteenable          (peripheral_bridge_s0_byteenable),                     //                         .byteenable
		.av_readdatavalid       (peripheral_bridge_s0_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (peripheral_bridge_s0_waitrequest),                    //                         .waitrequest
		.av_debugaccess         (peripheral_bridge_s0_debugaccess),                    //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (core_clk_clk_clk),                                      //                      clk.clk
		.reset                  (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                                //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (sdram_s1_address),                                      //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                                        //                         .write
		.av_read                (sdram_s1_read),                                         //                         .read
		.av_readdata            (sdram_s1_readdata),                                     //                         .readdata
		.av_writedata           (sdram_s1_writedata),                                    //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                                  //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                                   //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) uart_to_avmm_bridge_avm_agent (
		.clk                   (core_clk_clk_clk),                                                           //       clk.clk
		.reset                 (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.av_address            (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (uart_to_avmm_bridge_avm_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (uart_to_avmm_bridge_avm_agent_cp_valid),                                     //        cp.valid
		.cp_data               (uart_to_avmm_bridge_avm_agent_cp_data),                                      //          .data
		.cp_startofpacket      (uart_to_avmm_bridge_avm_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (uart_to_avmm_bridge_avm_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (uart_to_avmm_bridge_avm_agent_cp_ready),                                     //          .ready
		.rp_valid              (uart_to_avmm_bridge_avm_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (uart_to_avmm_bridge_avm_limiter_rsp_src_data),                               //          .data
		.rp_channel            (uart_to_avmm_bridge_avm_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (uart_to_avmm_bridge_avm_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (uart_to_avmm_bridge_avm_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (uart_to_avmm_bridge_avm_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_m1_agent (
		.clk                   (core_clk_clk_clk),                                          //       clk.clk
		.reset                 (vga_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (vga_m1_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (vga_m1_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (vga_m1_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (vga_m1_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (vga_m1_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (vga_m1_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (vga_m1_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (vga_m1_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (vga_m1_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (vga_m1_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (vga_m1_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (vga_m1_agent_cp_valid),                                     //        cp.valid
		.cp_data               (vga_m1_agent_cp_data),                                      //          .data
		.cp_startofpacket      (vga_m1_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (vga_m1_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (vga_m1_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                     //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                      //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                   //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                               //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                     //          .ready
		.av_response           (),                                                          // (terminated)
		.av_writeresponsevalid ()                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cam_m1_agent (
		.clk                   (core_clk_clk_clk),                                          //       clk.clk
		.reset                 (vga_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (cam_m1_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cam_m1_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cam_m1_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cam_m1_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cam_m1_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cam_m1_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cam_m1_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cam_m1_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cam_m1_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cam_m1_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cam_m1_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cam_m1_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cam_m1_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cam_m1_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cam_m1_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cam_m1_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                     //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                      //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                   //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                               //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                     //          .ready
		.av_response           (),                                                          // (terminated)
		.av_writeresponsevalid ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) peripheral_bridge_s0_agent (
		.clk                     (peri_clk_clk_clk),                                      //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (peripheral_bridge_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (peripheral_bridge_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (peripheral_bridge_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (peripheral_bridge_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (peripheral_bridge_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (peripheral_bridge_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (peripheral_bridge_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (peripheral_bridge_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (peripheral_bridge_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (peripheral_bridge_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (peripheral_bridge_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (peripheral_bridge_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (peripheral_bridge_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (peripheral_bridge_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (peripheral_bridge_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (peripheral_bridge_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                   //                .channel
		.rf_sink_ready           (peripheral_bridge_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (peripheral_bridge_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (peripheral_bridge_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (peripheral_bridge_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (peripheral_bridge_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (peripheral_bridge_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (peripheral_bridge_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (peripheral_bridge_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (peripheral_bridge_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (peripheral_bridge_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (peripheral_bridge_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (peripheral_bridge_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (peripheral_bridge_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) peripheral_bridge_s0_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                      //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (peripheral_bridge_s0_agent_rf_source_data),             //        in.data
		.in_valid          (peripheral_bridge_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (peripheral_bridge_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (peripheral_bridge_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (peripheral_bridge_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (peripheral_bridge_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (peripheral_bridge_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (peripheral_bridge_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (peripheral_bridge_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (peripheral_bridge_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) peripheral_bridge_s0_agent_rdata_fifo (
		.clk               (peri_clk_clk_clk),                                    //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (peripheral_bridge_s0_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (peripheral_bridge_s0_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (peripheral_bridge_s0_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (peripheral_bridge_s0_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (peripheral_bridge_s0_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (peripheral_bridge_s0_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (67),
		.PKT_BYTE_CNT_H            (66),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (core_clk_clk_clk),                                      //             clk.clk
		.reset                   (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (core_clk_clk_clk),                                      //       clk.clk
		.reset             (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (core_clk_clk_clk),                                      //       clk.clk
		.reset             (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	c4e_dvp_core_mm_interconnect_0_router router (
		.sink_ready         (uart_to_avmm_bridge_avm_agent_cp_ready),                //      sink.ready
		.sink_valid         (uart_to_avmm_bridge_avm_agent_cp_valid),                //          .valid
		.sink_data          (uart_to_avmm_bridge_avm_agent_cp_data),                 //          .data
		.sink_startofpacket (uart_to_avmm_bridge_avm_agent_cp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (uart_to_avmm_bridge_avm_agent_cp_endofpacket),          //          .endofpacket
		.clk                (core_clk_clk_clk),                                      //       clk.clk
		.reset              (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                      //       src.ready
		.src_valid          (router_src_valid),                                      //          .valid
		.src_data           (router_src_data),                                       //          .data
		.src_channel        (router_src_channel),                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                 //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (vga_m1_agent_cp_ready),                 //      sink.ready
		.sink_valid         (vga_m1_agent_cp_valid),                 //          .valid
		.sink_data          (vga_m1_agent_cp_data),                  //          .data
		.sink_startofpacket (vga_m1_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (vga_m1_agent_cp_endofpacket),           //          .endofpacket
		.clk                (core_clk_clk_clk),                      //       clk.clk
		.reset              (vga_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                  //       src.ready
		.src_valid          (router_001_src_valid),                  //          .valid
		.src_data           (router_001_src_data),                   //          .data
		.src_channel        (router_001_src_channel),                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)             //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (cam_m1_agent_cp_ready),                 //      sink.ready
		.sink_valid         (cam_m1_agent_cp_valid),                 //          .valid
		.sink_data          (cam_m1_agent_cp_data),                  //          .data
		.sink_startofpacket (cam_m1_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (cam_m1_agent_cp_endofpacket),           //          .endofpacket
		.clk                (core_clk_clk_clk),                      //       clk.clk
		.reset              (vga_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                  //       src.ready
		.src_valid          (router_002_src_valid),                  //          .valid
		.src_data           (router_002_src_data),                   //          .data
		.src_channel        (router_002_src_channel),                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)             //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (peripheral_bridge_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (peripheral_bridge_s0_agent_rp_valid),                 //          .valid
		.sink_data          (peripheral_bridge_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (peripheral_bridge_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (peripheral_bridge_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sdram_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                               //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (core_clk_clk_clk),                                      //       clk.clk
		.reset              (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) uart_to_avmm_bridge_avm_limiter (
		.clk                    (core_clk_clk_clk),                                      //       clk.clk
		.reset                  (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                      //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                      //          .valid
		.cmd_sink_data          (router_src_data),                                       //          .data
		.cmd_sink_channel       (router_src_channel),                                    //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                              //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                //          .endofpacket
		.cmd_src_ready          (uart_to_avmm_bridge_avm_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (uart_to_avmm_bridge_avm_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (uart_to_avmm_bridge_avm_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (uart_to_avmm_bridge_avm_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (uart_to_avmm_bridge_avm_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                     //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                   //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                      //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                               //          .endofpacket
		.rsp_src_ready          (uart_to_avmm_bridge_avm_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (uart_to_avmm_bridge_avm_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (uart_to_avmm_bridge_avm_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (uart_to_avmm_bridge_avm_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (uart_to_avmm_bridge_avm_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (uart_to_avmm_bridge_avm_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (uart_to_avmm_bridge_avm_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (66),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (67),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (core_clk_clk_clk),                                      //       cr0.clk
		.reset                 (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),                  //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),                   //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),                //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),                  //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),                   //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)                   //          .ready
	);

	c4e_dvp_core_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (core_clk_clk_clk),                                      //        clk.clk
		.reset              (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (uart_to_avmm_bridge_avm_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (uart_to_avmm_bridge_avm_limiter_cmd_src_channel),       //           .channel
		.sink_data          (uart_to_avmm_bridge_avm_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (uart_to_avmm_bridge_avm_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (uart_to_avmm_bridge_avm_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (uart_to_avmm_bridge_avm_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                  //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                  //           .valid
		.src0_data          (cmd_demux_src0_data),                                   //           .data
		.src0_channel       (cmd_demux_src0_channel),                                //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                          //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                            //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                  //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                  //           .valid
		.src1_data          (cmd_demux_src1_data),                                   //           .data
		.src1_channel       (cmd_demux_src1_channel),                                //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                          //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                             //           .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (core_clk_clk_clk),                      //       clk.clk
		.reset              (vga_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                  //      sink.ready
		.sink_channel       (router_001_src_channel),                //          .channel
		.sink_data          (router_001_src_data),                   //          .data
		.sink_startofpacket (router_001_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_001_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),              //          .valid
		.src0_data          (cmd_demux_001_src0_data),               //          .data
		.src0_channel       (cmd_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)         //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                (core_clk_clk_clk),                      //       clk.clk
		.reset              (vga_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                  //      sink.ready
		.sink_channel       (router_002_src_channel),                //          .channel
		.sink_data          (router_002_src_data),                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_002_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),              //          .valid
		.src0_data          (cmd_demux_002_src0_data),               //          .data
		.src0_channel       (cmd_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)         //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                   //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                   //          .valid
		.sink0_channel       (crosser_out_channel),                                 //          .channel
		.sink0_data          (crosser_out_data),                                    //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                              //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (core_clk_clk_clk),                                      //       clk.clk
		.reset               (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //          .valid
		.src_data            (cmd_mux_001_src_data),                                  //          .data
		.src_channel         (cmd_mux_001_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                //          .channel
		.sink0_data          (cmd_demux_src1_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                              //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                            //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                               //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                         //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (core_clk_clk_clk),                                      //       clk.clk
		.reset              (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_001_src1_data),                               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                              //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                              //          .valid
		.src2_data          (rsp_demux_001_src2_data),                               //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                            //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                         //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (core_clk_clk_clk),                                      //       clk.clk
		.reset               (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                     //          .valid
		.src_data            (rsp_mux_src_data),                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                 //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                 //          .valid
		.sink0_channel       (crosser_001_out_channel),                               //          .channel
		.sink0_data          (crosser_001_out_data),                                  //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                           //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                         //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (core_clk_clk_clk),                      //       clk.clk
		.reset               (vga_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //          .valid
		.src_data            (rsp_mux_001_src_data),                  //          .data
		.src_channel         (rsp_mux_001_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),              //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),            //          .channel
		.sink0_data          (rsp_demux_001_src1_data),               //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket)         //          .endofpacket
	);

	c4e_dvp_core_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (core_clk_clk_clk),                      //       clk.clk
		.reset               (vga_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                 //          .valid
		.src_data            (rsp_mux_002_src_data),                  //          .data
		.src_channel         (rsp_mux_002_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_001_src2_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_001_src2_valid),              //          .valid
		.sink0_channel       (rsp_demux_001_src2_channel),            //          .channel
		.sink0_data          (rsp_demux_001_src2_data),               //          .data
		.sink0_startofpacket (rsp_demux_001_src2_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src2_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (66),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (67),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (core_clk_clk_clk),                                      //       clk.clk
		.reset                (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_004_src_valid),                                  //      sink.valid
		.in_channel           (router_004_src_channel),                                //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_004_src_ready),                                  //          .ready
		.in_data              (router_004_src_data),                                   //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (66),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (core_clk_clk_clk),                                      //       clk.clk
		.reset                (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                 //          .ready
		.in_data              (cmd_mux_001_src_data),                                  //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (core_clk_clk_clk),                                      //        in_clk.clk
		.in_reset          (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (peri_clk_clk_clk),                                      //       out_clk.clk
		.out_reset         (peripheral_bridge_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                //              .channel
		.in_data           (cmd_demux_src0_data),                                   //              .data
		.out_ready         (crosser_out_ready),                                     //           out.ready
		.out_valid         (crosser_out_valid),                                     //              .valid
		.out_startofpacket (crosser_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_out_channel),                                   //              .channel
		.out_data          (crosser_out_data),                                      //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (peri_clk_clk_clk),                                      //        in_clk.clk
		.in_reset          (peripheral_bridge_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (core_clk_clk_clk),                                      //       out_clk.clk
		.out_reset         (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                //              .channel
		.in_data           (rsp_demux_src0_data),                                   //              .data
		.out_ready         (crosser_001_out_ready),                                 //           out.ready
		.out_valid         (crosser_001_out_valid),                                 //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_001_out_channel),                               //              .channel
		.out_data          (crosser_001_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	c4e_dvp_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (peri_clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (peripheral_bridge_s0_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (peripheral_bridge_s0_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (peripheral_bridge_s0_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	c4e_dvp_core_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (core_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (uart_to_avmm_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

endmodule
